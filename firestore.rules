rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             request.auth.token.email in [
               'doyextech@gmail.com',
               'ibrahimadekunle3030@gmail.com',
               'adekunleibrahim6060@gmail.com'
             ];
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // User profiles - users can read/write their own profile, admins can read all
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update: if isOwner(userId) || isAuthenticated();
      allow delete: if isAdmin();
    }

    // User access control - allow authenticated writes for payment
    match /userAccess/{accessId} {
      allow read: if isOwner(accessId) || isAdmin();
      allow write: if isAdmin() || isAuthenticated();
    }

    // Exam attempts - users can manage their own attempts, admins can read all
    match /examAttempts/{attemptId} {
      allow read: if isAuthenticated() || isAdmin();
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // Questions - authenticated users can read, only admins can write
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Exam results - users can manage their own results, admins can read all
    match /examResults/{resultId} {
      allow read: if isAuthenticated() || isAdmin();
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // Feedback - authenticated users can create, admins can read all
    match /feedback/{feedbackId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Access codes - only admins can manage
    match /accessCodes/{codeId} {
      allow read, write: if isAdmin();
    }

    // Transactions - allow authenticated users to read their own, create during payment
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() || isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Payment sessions - users can manage their own, admins can read all
    match /paymentSessions/{sessionId} {
      allow read: if isAuthenticated() || isAdmin();
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // University data - read access for authenticated users, write for admins
    match /universities/{universityId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Leaderboard data - read access for authenticated users
    match /leaderboard/{entryId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Exam schedules - only admins can manage, authenticated users can read
    match /examSchedules/{scheduleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
